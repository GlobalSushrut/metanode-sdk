apiVersion: v1
kind: Namespace
metadata:
  name: metanode-apps
  labels:
    name: metanode-apps
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metanode-app
  namespace: metanode-apps
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: metanode-app
  namespace: metanode-apps
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: metanode-app
  namespace: metanode-apps
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: metanode-app
subjects:
- kind: ServiceAccount
  name: metanode-app
  namespace: metanode-apps
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metanode-app-config
  namespace: metanode-apps
data:
  app-config.json: |
    {
      "testnet_url": "http://testnet-api.metanode-testnet:8545",
      "testnet_ws_url": "ws://testnet-api.metanode-testnet:8546",
      "ipfs_gateway": "http://ipfs-gateway.metanode-testnet:8080",
      "metrics_enabled": true,
      "log_level": "info",
      "secure_aggregation": true,
      "federated_learning": true,
      "api_version": "v1"
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app
  namespace: metanode-apps
  labels:
    app: metanode-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: metanode-app
  template:
    metadata:
      labels:
        app: metanode-app
    spec:
      serviceAccountName: metanode-app
      nodeSelector:
        app-node: "true"
      containers:
      - name: metanode-app
        image: metanode/sample-app:latest
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: APP_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: METANODE_TESTNET_URL
          value: "http://testnet-api.metanode-testnet:8545"
        - name: METANODE_TESTNET_WS_URL
          value: "ws://testnet-api.metanode-testnet:8546"
        volumeMounts:
        - name: app-data
          mountPath: /app/data
        - name: config-volume
          mountPath: /app/config
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /readiness
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
      volumes:
      - name: config-volume
        configMap:
          name: metanode-app-config
      - name: app-data
        persistentVolumeClaim:
          claimName: app-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-data
  namespace: metanode-apps
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: metanode-app
  namespace: metanode-apps
spec:
  selector:
    app: metanode-app
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: app-network-policy
  namespace: metanode-apps
spec:
  podSelector:
    matchLabels:
      app: metanode-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: metanode-testnet
      podSelector:
        matchLabels:
          app: metanode-testnet
    ports:
    - protocol: TCP
      port: 8545
    - protocol: TCP
      port: 8546
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
